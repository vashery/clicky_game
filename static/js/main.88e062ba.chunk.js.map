{"version":3,"sources":["components/TitleBar/index.js","components/Card/index.js","components/Main/index.js","App.js","serviceWorker.js","index.js"],"names":["TitleBar","refreshPage","window","location","reload","react_default","a","createElement","className","href","onClick","this","props","score","highscore","Component","Card","_this","removeCard","id","alt","src","image","Main","state","cards","topscore","shuffleArray","array","i","length","j","Math","floor","random","temp","resetArray","arr","beenclicked","index","findIndex","card","setState","newcards","console","log","_this2","components_TitleBar","map","components_Card","App","components_Main","Boolean","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oMAsBeA,6MAjBXC,YAAc,WACVC,OAAOC,SAASC,kFAIhB,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACXH,EAAAC,EAAAC,cAAA,KAAGE,KAAK,IAAID,UAAU,OAAOE,QAAUC,KAAKV,aAA5C,eACAI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAf,kBAAsCG,KAAKC,MAAMC,OACjDR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAf,eAAmCG,KAAKC,MAAME,mBAZvCC,aCYRC,mLAXF,IAAAC,EAAAN,KACL,OACIN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,+BAA+BE,QAAS,kBAAMO,EAAKL,MAAMM,WAAWD,EAAKL,MAAMO,MAC1Fd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACXH,EAAAC,EAAAC,cAAA,OAAKa,IAAI,OAAOC,IAAKV,KAAKC,MAAMU,iBALjCP,oBCuEJQ,6MAnEbC,MAAQ,CACNC,QACAZ,MAAO,EACPa,SAAU,KAGZC,aAAe,SAAAC,GAEb,IADA,IAAIC,EAAID,EAAME,OAAS,EAChBD,EAAI,EAAGA,IAAK,CACjB,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IACpCM,EAAOP,EAAMC,GACnBD,EAAMC,GAAKD,EAAMG,GACjBH,EAAMG,GAAKI,EAEb,OAAOP,KAGTQ,WAAa,SAAAC,GACX,IAAK,IAAIR,EAAI,EAAGA,EAAIQ,EAAIP,OAAQD,IAC9BQ,EAAIR,GAAGS,aAAc,EAEvB,OAAOD,KAGTnB,WAAa,SAAAC,GAEX,IAAMoB,EAAQtB,EAAKO,MAAMC,MAAMe,UAAU,SAAAC,GAAI,OAAIA,EAAKtB,KAAOA,IAC7D,GAAIM,EAAMc,GAAOD,YAAa,CAC5BrB,EAAKyB,SAAS,CAAE7B,MAAO,IACvB,IAAM8B,EAAW1B,EAAKmB,WAAWnB,EAAKO,MAAMC,OAC5CmB,QAAQC,IAAIF,GACZ1B,EAAKyB,SAAS,CAAEjB,MAAOkB,SAGvB1B,EAAKyB,SAAS,CAAE7B,MAAOI,EAAKO,MAAMX,MAAQ,IAEtCI,EAAKO,MAAME,UAAYT,EAAKO,MAAMX,OACpCI,EAAKyB,SAAS,CAAEhB,SAAUT,EAAKO,MAAME,SAAW,IAElDD,EAAMc,GAAOD,aAAc,EAG7BrB,EAAKU,aAAaF,GAClBR,EAAKyB,SAAS,CAAEjB,mFAIT,IAAAqB,EAAAnC,KACP,OAEEN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAACwC,EAAD,CAAUlC,MAAOF,KAAKa,MAAMX,MAAOC,UAAWH,KAAKa,MAAME,WACzDrB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACZG,KAAKa,MAAMC,MAAMuB,IAAI,SAAAP,GAAI,OACxBpC,EAAAC,EAAAC,cAAC0C,EAAD,CACE/B,WAAY4B,EAAK5B,WACjBC,GAAIsB,EAAKtB,GACTG,MAAOmB,EAAKnB,mBA3DPP,aCOJmC,mLAPX,OACE7C,EAAAC,EAAAC,cAAC4C,EAAD,aAHYpC,aCSEqC,QACW,cAA7BlD,OAAOC,SAASkD,UAEe,UAA7BnD,OAAOC,SAASkD,UAEhBnD,OAAOC,SAASkD,SAASC,MACvB,2DCZNC,IAASC,OAAOnD,EAAAC,EAAAC,cAACkD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.88e062ba.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\n\nclass TitleBar extends Component {\n\n    refreshPage = () => { \n        window.location.reload(); \n    }\n\n    render() {\n        return (\n            <div className=\"ui four item menu\">\n                <a href=\"/\" className=\"item\" onClick={ this.refreshPage }>Clicky Game</a>\n                <div className=\"item\"></div>\n                <div className=\"item\">Current Score: {this.props.score}</div>\n                <div className=\"item\">High Score: {this.props.highscore}</div>\n            </div>\n        )\n\n    }\n}\n\nexport default TitleBar;\n","import React, { Component } from \"react\";\n\n\nclass Card extends Component {\n    render() {\n        return (\n            <div className=\"ui raised link centered card\" onClick={() => this.props.removeCard(this.props.id)}>\n                <div className=\"image\">\n                    <img alt=\"doge\" src={this.props.image} />\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Card;\n","import React, { Component } from 'react';\nimport TitleBar from \"../TitleBar\";\nimport Card from \"../Card\";\nimport cards from \"../../cards.json\"\n\nclass Main extends Component {\n\n  state = {\n    cards,\n    score: 0,\n    topscore: 0\n  };\n\n  shuffleArray = array => {\n    let i = array.length - 1;\n    for (; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      const temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n    }\n    return array;\n  }\n\n  resetArray = arr => {\n    for (let i = 0; i < arr.length; i++) {\n      arr[i].beenclicked = false;\n    }\n    return arr\n  }\n\n  removeCard = id => {\n    // Filter this.state.cards for friends with an id not equal to the id being removed\n    const index = this.state.cards.findIndex(card => card.id === id);\n    if (cards[index].beenclicked) {\n      this.setState({ score: 0 })\n      const newcards = this.resetArray(this.state.cards);\n      console.log(newcards)\n      this.setState({ cards: newcards })\n    }\n    else {\n      this.setState({ score: this.state.score + 1 })\n      //this.setState({topscore: this.state.topscore + 1})\n      if (this.state.topscore <= this.state.score) {\n        this.setState({ topscore: this.state.topscore + 1 })\n      }\n      cards[index].beenclicked = true;\n    }\n    // Set this.state.friends equal to the new friends array\n    this.shuffleArray(cards);\n    this.setState({ cards });\n\n  };\n\n  render() {\n    return (\n\n      <div className=\"container ui\">\n        <TitleBar score={this.state.score} highscore={this.state.topscore} />\n        <div className=\"ui cards\">\n          {this.state.cards.map(card => (\n            <Card\n              removeCard={this.removeCard}\n              id={card.id}\n              image={card.image}\n            />\n          ))}\n\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Main;\n","import React, { Component } from 'react';\nimport Main from \"./components/Main\"\n\nclass App extends Component {\n  render() {\n    return (\n      <Main />\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}